{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN2kGWZ8dONdMSupstASsOq"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TFgKuxGHtKyf","executionInfo":{"status":"ok","timestamp":1694158476340,"user_tz":-330,"elapsed":108562,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"aedeab51-d0d5-4c58-dce9-d4b6a66a27ae"},"outputs":[{"output_type":"stream","name":"stdout","text":["--2023-09-08 07:32:47--  https://repo.anaconda.com/miniconda/Miniconda3-py37_4.8.2-Linux-x86_64.sh\n","Resolving repo.anaconda.com (repo.anaconda.com)... 104.16.130.3, 104.16.131.3, 2606:4700::6810:8203, ...\n","Connecting to repo.anaconda.com (repo.anaconda.com)|104.16.130.3|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 85055499 (81M) [application/x-sh]\n","Saving to: ‘Miniconda3-py37_4.8.2-Linux-x86_64.sh’\n","\n","Miniconda3-py37_4.8 100%[===================>]  81.12M   225MB/s    in 0.4s    \n","\n","2023-09-08 07:32:47 (225 MB/s) - ‘Miniconda3-py37_4.8.2-Linux-x86_64.sh’ saved [85055499/85055499]\n","\n","PREFIX=/usr/local\n","Unpacking payload ...\n","Collecting package metadata (current_repodata.json): - \b\b\\ \b\bdone\n","Solving environment: / \b\b- \b\bdone\n","\n","## Package Plan ##\n","\n","  environment location: /usr/local\n","\n","  added / updated specs:\n","    - _libgcc_mutex==0.1=main\n","    - asn1crypto==1.3.0=py37_0\n","    - ca-certificates==2020.1.1=0\n","    - certifi==2019.11.28=py37_0\n","    - cffi==1.14.0=py37h2e261b9_0\n","    - chardet==3.0.4=py37_1003\n","    - conda-package-handling==1.6.0=py37h7b6447c_0\n","    - conda==4.8.2=py37_0\n","    - cryptography==2.8=py37h1ba5d50_0\n","    - idna==2.8=py37_0\n","    - ld_impl_linux-64==2.33.1=h53a641e_7\n","    - libedit==3.1.20181209=hc058e9b_0\n","    - libffi==3.2.1=hd88cf55_4\n","    - libgcc-ng==9.1.0=hdf63c60_0\n","    - libstdcxx-ng==9.1.0=hdf63c60_0\n","    - ncurses==6.2=he6710b0_0\n","    - openssl==1.1.1d=h7b6447c_4\n","    - pip==20.0.2=py37_1\n","    - pycosat==0.6.3=py37h7b6447c_0\n","    - pycparser==2.19=py37_0\n","    - pyopenssl==19.1.0=py37_0\n","    - pysocks==1.7.1=py37_0\n","    - python==3.7.6=h0371630_2\n","    - readline==7.0=h7b6447c_5\n","    - requests==2.22.0=py37_1\n","    - ruamel_yaml==0.15.87=py37h7b6447c_0\n","    - setuptools==45.2.0=py37_0\n","    - six==1.14.0=py37_0\n","    - sqlite==3.31.1=h7b6447c_0\n","    - tk==8.6.8=hbc83047_0\n","    - tqdm==4.42.1=py_0\n","    - urllib3==1.25.8=py37_0\n","    - wheel==0.34.2=py37_0\n","    - xz==5.2.4=h14c3975_4\n","    - yaml==0.1.7=had09818_2\n","    - zlib==1.2.11=h7b6447c_3\n","\n","\n","The following NEW packages will be INSTALLED:\n","\n","  _libgcc_mutex      pkgs/main/linux-64::_libgcc_mutex-0.1-main\n","  asn1crypto         pkgs/main/linux-64::asn1crypto-1.3.0-py37_0\n","  ca-certificates    pkgs/main/linux-64::ca-certificates-2020.1.1-0\n","  certifi            pkgs/main/linux-64::certifi-2019.11.28-py37_0\n","  cffi               pkgs/main/linux-64::cffi-1.14.0-py37h2e261b9_0\n","  chardet            pkgs/main/linux-64::chardet-3.0.4-py37_1003\n","  conda              pkgs/main/linux-64::conda-4.8.2-py37_0\n","  conda-package-han~ pkgs/main/linux-64::conda-package-handling-1.6.0-py37h7b6447c_0\n","  cryptography       pkgs/main/linux-64::cryptography-2.8-py37h1ba5d50_0\n","  idna               pkgs/main/linux-64::idna-2.8-py37_0\n","  ld_impl_linux-64   pkgs/main/linux-64::ld_impl_linux-64-2.33.1-h53a641e_7\n","  libedit            pkgs/main/linux-64::libedit-3.1.20181209-hc058e9b_0\n","  libffi             pkgs/main/linux-64::libffi-3.2.1-hd88cf55_4\n","  libgcc-ng          pkgs/main/linux-64::libgcc-ng-9.1.0-hdf63c60_0\n","  libstdcxx-ng       pkgs/main/linux-64::libstdcxx-ng-9.1.0-hdf63c60_0\n","  ncurses            pkgs/main/linux-64::ncurses-6.2-he6710b0_0\n","  openssl            pkgs/main/linux-64::openssl-1.1.1d-h7b6447c_4\n","  pip                pkgs/main/linux-64::pip-20.0.2-py37_1\n","  pycosat            pkgs/main/linux-64::pycosat-0.6.3-py37h7b6447c_0\n","  pycparser          pkgs/main/linux-64::pycparser-2.19-py37_0\n","  pyopenssl          pkgs/main/linux-64::pyopenssl-19.1.0-py37_0\n","  pysocks            pkgs/main/linux-64::pysocks-1.7.1-py37_0\n","  python             pkgs/main/linux-64::python-3.7.6-h0371630_2\n","  readline           pkgs/main/linux-64::readline-7.0-h7b6447c_5\n","  requests           pkgs/main/linux-64::requests-2.22.0-py37_1\n","  ruamel_yaml        pkgs/main/linux-64::ruamel_yaml-0.15.87-py37h7b6447c_0\n","  setuptools         pkgs/main/linux-64::setuptools-45.2.0-py37_0\n","  six                pkgs/main/linux-64::six-1.14.0-py37_0\n","  sqlite             pkgs/main/linux-64::sqlite-3.31.1-h7b6447c_0\n","  tk                 pkgs/main/linux-64::tk-8.6.8-hbc83047_0\n","  tqdm               pkgs/main/noarch::tqdm-4.42.1-py_0\n","  urllib3            pkgs/main/linux-64::urllib3-1.25.8-py37_0\n","  wheel              pkgs/main/linux-64::wheel-0.34.2-py37_0\n","  xz                 pkgs/main/linux-64::xz-5.2.4-h14c3975_4\n","  yaml               pkgs/main/linux-64::yaml-0.1.7-had09818_2\n","  zlib               pkgs/main/linux-64::zlib-1.2.11-h7b6447c_3\n","\n","\n","Preparing transaction: | \b\b/ \b\b- \b\b\\ \b\bdone\n","Executing transaction: / \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\bdone\n","installation finished.\n","WARNING:\n","    You currently have a PYTHONPATH environment variable set. This may cause\n","    unexpected behavior when running the Python interpreter in Miniconda3.\n","    For best results, please verify that your PYTHONPATH only points to\n","    directories of packages that are compatible with the Python interpreter\n","    in Miniconda3: /usr/local\n","Collecting package metadata (current_repodata.json): - \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\bdone\n","Solving environment: / \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\bfailed with initial frozen solve. Retrying with flexible solve.\n","Solving environment: / \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\bfailed with repodata from current_repodata.json, will retry with next repodata source.\n","Collecting package metadata (repodata.json): | \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\bdone\n","Solving environment: - \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\bdone\n","\n","## Package Plan ##\n","\n","  environment location: /usr/local\n","\n","  added / updated specs:\n","    - rdkit\n","\n","\n","The following packages will be downloaded:\n","\n","    package                    |            build\n","    ---------------------------|-----------------\n","    blas-1.0                   |              mkl           6 KB\n","    bottleneck-1.3.4           |   py37hce1f21e_0         126 KB\n","    bzip2-1.0.8                |       h7b6447c_0          78 KB\n","    ca-certificates-2023.08.22 |       h06a4308_0         123 KB\n","    cairo-1.14.12              |       h8948797_3         906 KB\n","    certifi-2022.12.7          |   py37h06a4308_0         150 KB\n","    conda-23.1.0               |   py37h06a4308_0         937 KB\n","    flit-core-3.6.0            |     pyhd3eb1b0_0          42 KB\n","    fontconfig-2.13.0          |       h9420a91_0         227 KB\n","    freetype-2.11.0            |       h70c0345_0         618 KB\n","    glib-2.63.1                |       h5a9c865_0         2.9 MB\n","    icu-58.2                   |       he6710b0_3        10.5 MB\n","    importlib-metadata-4.11.3  |   py37h06a4308_0          40 KB\n","    importlib_metadata-4.11.3  |       hd3eb1b0_0          12 KB\n","    intel-openmp-2021.4.0      |    h06a4308_3561         4.2 MB\n","    jpeg-9e                    |       h7f8727e_0         240 KB\n","    lcms2-2.12                 |       h3be6417_0         312 KB\n","    libboost-1.67.0            |       h46d08c1_4        13.0 MB\n","    libpng-1.6.37              |       hbc83047_0         278 KB\n","    libtiff-4.1.0              |       h2733197_0         447 KB\n","    libuuid-1.0.3              |       h7f8727e_2          17 KB\n","    libxcb-1.15                |       h7f8727e_0         505 KB\n","    libxml2-2.9.9              |       hea5a465_1         1.6 MB\n","    mkl-2021.4.0               |     h06a4308_640       142.6 MB\n","    mkl-service-2.4.0          |   py37h7f8727e_0          56 KB\n","    mkl_fft-1.3.1              |   py37hd3c417c_0         172 KB\n","    mkl_random-1.2.2           |   py37h51133e4_0         287 KB\n","    numexpr-2.8.1              |   py37h6abb31d_0         123 KB\n","    numpy-1.21.5               |   py37he7a7128_2          10 KB\n","    numpy-base-1.21.5          |   py37hf524024_2         4.8 MB\n","    olefile-0.46               |           py37_0          50 KB\n","    openjpeg-2.4.0             |       h3ad879b_0         331 KB\n","    openssl-1.1.1v             |       h7f8727e_0         3.7 MB\n","    packaging-22.0             |   py37h06a4308_0          68 KB\n","    pandas-1.3.5               |   py37h8c16a72_0         9.3 MB\n","    pcre-8.45                  |       h295c915_0         207 KB\n","    pillow-8.3.1               |   py37h2c7a002_0         635 KB\n","    pixman-0.40.0              |       h7f8727e_1         373 KB\n","    pluggy-1.0.0               |   py37h06a4308_1          29 KB\n","    py-boost-1.67.0            |   py37h04863e7_4         278 KB\n","    python-dateutil-2.8.2      |     pyhd3eb1b0_0         233 KB\n","    pytz-2022.7                |   py37h06a4308_0         207 KB\n","    rdkit-2020.03.3.0          |   py37hc20afe1_1        24.8 MB  rdkit\n","    ruamel.yaml-0.16.12        |   py37h7b6447c_1         173 KB\n","    ruamel.yaml.clib-0.2.6     |   py37h7f8727e_0         133 KB\n","    toolz-0.12.0               |   py37h06a4308_0         104 KB\n","    typing_extensions-4.4.0    |   py37h06a4308_0          45 KB\n","    zipp-3.11.0                |   py37h06a4308_0          19 KB\n","    zstd-1.3.7                 |       h0b5b093_0         401 KB\n","    ------------------------------------------------------------\n","                                           Total:       226.1 MB\n","\n","The following NEW packages will be INSTALLED:\n","\n","  blas               pkgs/main/linux-64::blas-1.0-mkl\n","  bottleneck         pkgs/main/linux-64::bottleneck-1.3.4-py37hce1f21e_0\n","  bzip2              pkgs/main/linux-64::bzip2-1.0.8-h7b6447c_0\n","  cairo              pkgs/main/linux-64::cairo-1.14.12-h8948797_3\n","  flit-core          pkgs/main/noarch::flit-core-3.6.0-pyhd3eb1b0_0\n","  fontconfig         pkgs/main/linux-64::fontconfig-2.13.0-h9420a91_0\n","  freetype           pkgs/main/linux-64::freetype-2.11.0-h70c0345_0\n","  glib               pkgs/main/linux-64::glib-2.63.1-h5a9c865_0\n","  icu                pkgs/main/linux-64::icu-58.2-he6710b0_3\n","  importlib-metadata pkgs/main/linux-64::importlib-metadata-4.11.3-py37h06a4308_0\n","  importlib_metadata pkgs/main/noarch::importlib_metadata-4.11.3-hd3eb1b0_0\n","  intel-openmp       pkgs/main/linux-64::intel-openmp-2021.4.0-h06a4308_3561\n","  jpeg               pkgs/main/linux-64::jpeg-9e-h7f8727e_0\n","  lcms2              pkgs/main/linux-64::lcms2-2.12-h3be6417_0\n","  libboost           pkgs/main/linux-64::libboost-1.67.0-h46d08c1_4\n","  libpng             pkgs/main/linux-64::libpng-1.6.37-hbc83047_0\n","  libtiff            pkgs/main/linux-64::libtiff-4.1.0-h2733197_0\n","  libuuid            pkgs/main/linux-64::libuuid-1.0.3-h7f8727e_2\n","  libxcb             pkgs/main/linux-64::libxcb-1.15-h7f8727e_0\n","  libxml2            pkgs/main/linux-64::libxml2-2.9.9-hea5a465_1\n","  mkl                pkgs/main/linux-64::mkl-2021.4.0-h06a4308_640\n","  mkl-service        pkgs/main/linux-64::mkl-service-2.4.0-py37h7f8727e_0\n","  mkl_fft            pkgs/main/linux-64::mkl_fft-1.3.1-py37hd3c417c_0\n","  mkl_random         pkgs/main/linux-64::mkl_random-1.2.2-py37h51133e4_0\n","  numexpr            pkgs/main/linux-64::numexpr-2.8.1-py37h6abb31d_0\n","  numpy              pkgs/main/linux-64::numpy-1.21.5-py37he7a7128_2\n","  numpy-base         pkgs/main/linux-64::numpy-base-1.21.5-py37hf524024_2\n","  olefile            pkgs/main/linux-64::olefile-0.46-py37_0\n","  openjpeg           pkgs/main/linux-64::openjpeg-2.4.0-h3ad879b_0\n","  packaging          pkgs/main/linux-64::packaging-22.0-py37h06a4308_0\n","  pandas             pkgs/main/linux-64::pandas-1.3.5-py37h8c16a72_0\n","  pcre               pkgs/main/linux-64::pcre-8.45-h295c915_0\n","  pillow             pkgs/main/linux-64::pillow-8.3.1-py37h2c7a002_0\n","  pixman             pkgs/main/linux-64::pixman-0.40.0-h7f8727e_1\n","  pluggy             pkgs/main/linux-64::pluggy-1.0.0-py37h06a4308_1\n","  py-boost           pkgs/main/linux-64::py-boost-1.67.0-py37h04863e7_4\n","  python-dateutil    pkgs/main/noarch::python-dateutil-2.8.2-pyhd3eb1b0_0\n","  pytz               pkgs/main/linux-64::pytz-2022.7-py37h06a4308_0\n","  rdkit              rdkit/linux-64::rdkit-2020.03.3.0-py37hc20afe1_1\n","  ruamel.yaml        pkgs/main/linux-64::ruamel.yaml-0.16.12-py37h7b6447c_1\n","  ruamel.yaml.clib   pkgs/main/linux-64::ruamel.yaml.clib-0.2.6-py37h7f8727e_0\n","  toolz              pkgs/main/linux-64::toolz-0.12.0-py37h06a4308_0\n","  typing_extensions  pkgs/main/linux-64::typing_extensions-4.4.0-py37h06a4308_0\n","  zipp               pkgs/main/linux-64::zipp-3.11.0-py37h06a4308_0\n","  zstd               pkgs/main/linux-64::zstd-1.3.7-h0b5b093_0\n","\n","The following packages will be UPDATED:\n","\n","  ca-certificates                                2020.1.1-0 --> 2023.08.22-h06a4308_0\n","  certifi                                 2019.11.28-py37_0 --> 2022.12.7-py37h06a4308_0\n","  conda                                        4.8.2-py37_0 --> 23.1.0-py37h06a4308_0\n","  openssl                                 1.1.1d-h7b6447c_4 --> 1.1.1v-h7f8727e_0\n","\n","\n","\n","Downloading and Extracting Packages\n","blas-1.0             | 6 KB      | : 100% 1.0/1 [00:00<00:00,  5.29it/s]\n","cairo-1.14.12        | 906 KB    | : 100% 1.0/1 [00:00<00:00,  4.43it/s]\n","zipp-3.11.0          | 19 KB     | : 100% 1.0/1 [00:00<00:00,  7.16it/s]\n","bottleneck-1.3.4     | 126 KB    | : 100% 1.0/1 [00:00<00:00,  5.78it/s]\n","flit-core-3.6.0      | 42 KB     | : 100% 1.0/1 [00:00<00:00,  5.89it/s]\n","mkl_random-1.2.2     | 287 KB    | : 100% 1.0/1 [00:00<00:00,  5.64it/s]\n","glib-2.63.1          | 2.9 MB    | : 100% 1.0/1 [00:00<00:00,  2.60it/s]\n","libuuid-1.0.3        | 17 KB     | : 100% 1.0/1 [00:00<00:00,  5.92it/s]\n","icu-58.2             | 10.5 MB   | : 100% 1.0/1 [00:00<00:00,  1.69it/s]                \n","pixman-0.40.0        | 373 KB    | : 100% 1.0/1 [00:00<00:00,  5.24it/s]\n","pandas-1.3.5         | 9.3 MB    | : 100% 1.0/1 [00:01<00:00,  1.34it/s]               \n","libxml2-2.9.9        | 1.6 MB    | : 100% 1.0/1 [00:00<00:00,  3.93it/s]\n","mkl_fft-1.3.1        | 172 KB    | : 100% 1.0/1 [00:00<00:00,  6.71it/s]\n","pillow-8.3.1         | 635 KB    | : 100% 1.0/1 [00:00<00:00,  5.43it/s]\n","bzip2-1.0.8          | 78 KB     | : 100% 1.0/1 [00:00<00:00,  6.46it/s]\n","pcre-8.45            | 207 KB    | : 100% 1.0/1 [00:00<00:00,  6.70it/s]\n","typing_extensions-4. | 45 KB     | : 100% 1.0/1 [00:00<00:00,  7.00it/s]\n","numpy-1.21.5         | 10 KB     | : 100% 1.0/1 [00:00<00:00,  6.81it/s]\n","importlib-metadata-4 | 40 KB     | : 100% 1.0/1 [00:00<00:00,  6.59it/s]\n","libpng-1.6.37        | 278 KB    | : 100% 1.0/1 [00:00<00:00,  6.63it/s]\n","pytz-2022.7          | 207 KB    | : 100% 1.0/1 [00:00<00:00,  5.02it/s]\n","intel-openmp-2021.4. | 4.2 MB    | : 100% 1.0/1 [00:00<00:00,  2.89it/s]\n","mkl-2021.4.0         | 142.6 MB  | : 100% 1.0/1 [00:08<00:00, 28.73s/it]               \n","ca-certificates-2023 | 123 KB    | : 100% 1.0/1 [00:00<00:00,  4.78it/s]\n","toolz-0.12.0         | 104 KB    | : 100% 1.0/1 [00:00<00:00,  5.32it/s]\n","lcms2-2.12           | 312 KB    | : 100% 1.0/1 [00:00<00:00,  3.90it/s]\n","libboost-1.67.0      | 13.0 MB   | : 100% 1.0/1 [00:07<00:00,  8.99s/it]               \n","mkl-service-2.4.0    | 56 KB     | : 100% 1.0/1 [00:00<00:00,  4.57it/s]\n","certifi-2022.12.7    | 150 KB    | : 100% 1.0/1 [00:00<00:00,  4.35it/s]\n","libtiff-4.1.0        | 447 KB    | : 100% 1.0/1 [00:00<00:00,  3.32it/s]\n","fontconfig-2.13.0    | 227 KB    | : 100% 1.0/1 [00:00<00:00,  4.28it/s]\n","ruamel.yaml.clib-0.2 | 133 KB    | : 100% 1.0/1 [00:00<00:00,  4.33it/s]\n","py-boost-1.67.0      | 278 KB    | : 100% 1.0/1 [00:00<00:00,  2.94it/s]\n","conda-23.1.0         | 937 KB    | : 100% 1.0/1 [00:00<00:00,  2.25it/s]\n","pluggy-1.0.0         | 29 KB     | : 100% 1.0/1 [00:00<00:00,  5.20it/s]\n","python-dateutil-2.8. | 233 KB    | : 100% 1.0/1 [00:00<00:00,  4.85it/s]\n","olefile-0.46         | 50 KB     | : 100% 1.0/1 [00:00<00:00,  4.89it/s]\n","numexpr-2.8.1        | 123 KB    | : 100% 1.0/1 [00:00<00:00,  4.09it/s]\n","libxcb-1.15          | 505 KB    | : 100% 1.0/1 [00:00<00:00,  4.72it/s]\n","openssl-1.1.1v       | 3.7 MB    | : 100% 1.0/1 [00:00<00:00,  2.91it/s]\n","rdkit-2020.03.3.0    | 24.8 MB   | : 100% 1.0/1 [00:06<00:00,  6.99s/it]\n","numpy-base-1.21.5    | 4.8 MB    | : 100% 1.0/1 [00:00<00:00,  1.96it/s]\n","zstd-1.3.7           | 401 KB    | : 100% 1.0/1 [00:00<00:00,  6.39it/s]\n","openjpeg-2.4.0       | 331 KB    | : 100% 1.0/1 [00:00<00:00,  6.29it/s]\n","packaging-22.0       | 68 KB     | : 100% 1.0/1 [00:00<00:00,  6.76it/s]\n","jpeg-9e              | 240 KB    | : 100% 1.0/1 [00:00<00:00,  6.26it/s]\n","freetype-2.11.0      | 618 KB    | : 100% 1.0/1 [00:00<00:00,  5.94it/s]\n","ruamel.yaml-0.16.12  | 173 KB    | : 100% 1.0/1 [00:00<00:00,  6.30it/s]\n","importlib_metadata-4 | 12 KB     | : 100% 1.0/1 [00:00<00:00,  6.93it/s]\n","Preparing transaction: / \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\bdone\n","Verifying transaction: - \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\bdone\n","Executing transaction: | \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\b/ \b\b- \b\b\\ \b\b| \b\bdone\n"]}],"source":["! wget https://repo.anaconda.com/miniconda/Miniconda3-py37_4.8.2-Linux-x86_64.sh\n","! chmod +x Miniconda3-py37_4.8.2-Linux-x86_64.sh\n","! bash ./Miniconda3-py37_4.8.2-Linux-x86_64.sh -b -f -p /usr/local\n","! conda install -c rdkit rdkit -y\n","import sys\n","sys.path.append('/usr/local/lib/python3.7/site-packages/')\n",""]},{"cell_type":"code","source":["import pandas as pd\n","df = pd.read_csv('/content/CD73_bioactivity_data_curated.csv')\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":686},"id":"vZ5XgrWSt26H","executionInfo":{"status":"ok","timestamp":1694158566572,"user_tz":-330,"elapsed":887,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"9fac798d-3d7c-4d59-e9ae-bc9da1c1cf0c"},"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    molecule_chembl_id                                   canonical_smiles  \\\n","0          CHEMBL68253                                        NS(=O)(=O)O   \n","1        CHEMBL1339340             Cc1ccc2nc(-c3ccc(N)cc3)sc2c1S(=O)(=O)O   \n","2        CHEMBL3088000                CC1=NN(c2ccc(S(=O)(=O)O)cc2)C(=O)C1   \n","3        CHEMBL3087999       Nc1c(O)cc(S(=O)(=O)O)c2cc([N+](=O)[O-])ccc12   \n","4        CHEMBL3087998     Nc1ccc(Nc2ccc([N+](=O)[O-])cc2)c(S(=O)(=O)O)c1   \n","..                 ...                                                ...   \n","291      CHEMBL5190085  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","292      CHEMBL5207600  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","293      CHEMBL5177276  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","294      CHEMBL5187845  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","295      CHEMBL5170520  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","\n","     standard_value         class  \n","0           42100.0      inactive  \n","1           13500.0      inactive  \n","2            6100.0  intermediate  \n","3           41000.0      inactive  \n","4           47600.0      inactive  \n","..              ...           ...  \n","291          5690.0  intermediate  \n","292         37190.0      inactive  \n","293          1390.0  intermediate  \n","294        100000.0      inactive  \n","295        100000.0      inactive  \n","\n","[296 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-b27c2b47-fcfe-4a4b-8bc7-7429cbcd3ad7\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>molecule_chembl_id</th>\n","      <th>canonical_smiles</th>\n","      <th>standard_value</th>\n","      <th>class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>CHEMBL68253</td>\n","      <td>NS(=O)(=O)O</td>\n","      <td>42100.0</td>\n","      <td>inactive</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CHEMBL1339340</td>\n","      <td>Cc1ccc2nc(-c3ccc(N)cc3)sc2c1S(=O)(=O)O</td>\n","      <td>13500.0</td>\n","      <td>inactive</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>CHEMBL3088000</td>\n","      <td>CC1=NN(c2ccc(S(=O)(=O)O)cc2)C(=O)C1</td>\n","      <td>6100.0</td>\n","      <td>intermediate</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>CHEMBL3087999</td>\n","      <td>Nc1c(O)cc(S(=O)(=O)O)c2cc([N+](=O)[O-])ccc12</td>\n","      <td>41000.0</td>\n","      <td>inactive</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CHEMBL3087998</td>\n","      <td>Nc1ccc(Nc2ccc([N+](=O)[O-])cc2)c(S(=O)(=O)O)c1</td>\n","      <td>47600.0</td>\n","      <td>inactive</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>291</th>\n","      <td>CHEMBL5190085</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>5690.0</td>\n","      <td>intermediate</td>\n","    </tr>\n","    <tr>\n","      <th>292</th>\n","      <td>CHEMBL5207600</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>37190.0</td>\n","      <td>inactive</td>\n","    </tr>\n","    <tr>\n","      <th>293</th>\n","      <td>CHEMBL5177276</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>1390.0</td>\n","      <td>intermediate</td>\n","    </tr>\n","    <tr>\n","      <th>294</th>\n","      <td>CHEMBL5187845</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>100000.0</td>\n","      <td>inactive</td>\n","    </tr>\n","    <tr>\n","      <th>295</th>\n","      <td>CHEMBL5170520</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>100000.0</td>\n","      <td>inactive</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>296 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b27c2b47-fcfe-4a4b-8bc7-7429cbcd3ad7')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b27c2b47-fcfe-4a4b-8bc7-7429cbcd3ad7 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b27c2b47-fcfe-4a4b-8bc7-7429cbcd3ad7');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-97065f96-de1f-4fa6-9713-828874a71361\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-97065f96-de1f-4fa6-9713-828874a71361')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-97065f96-de1f-4fa6-9713-828874a71361 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["df_no_smiles = df.drop(columns = 'canonical_smiles')"],"metadata":{"id":"cdTMuWW-uCd_","executionInfo":{"status":"ok","timestamp":1694158594172,"user_tz":-330,"elapsed":3,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["smiles = []\n","\n","for i in df.canonical_smiles.tolist():\n","  cpd = str(i).split('.')\n","  cpd_longest = max(cpd, key = len)\n","  smiles.append(cpd_longest)\n","smiles = pd.Series(smiles, name = 'canonical_smiles')"],"metadata":{"id":"l5iSpG9ruJqt","executionInfo":{"status":"ok","timestamp":1694158711092,"user_tz":-330,"elapsed":5,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["df_clean_smiles = pd.concat([df_no_smiles, smiles], axis = 1)\n","df_clean_smiles"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":686},"id":"yvQcG8XUumNd","executionInfo":{"status":"ok","timestamp":1694158755499,"user_tz":-330,"elapsed":8,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"46d04c17-c7a4-4635-836a-0d7b9902a8fe"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    molecule_chembl_id  standard_value         class  \\\n","0          CHEMBL68253         42100.0      inactive   \n","1        CHEMBL1339340         13500.0      inactive   \n","2        CHEMBL3088000          6100.0  intermediate   \n","3        CHEMBL3087999         41000.0      inactive   \n","4        CHEMBL3087998         47600.0      inactive   \n","..                 ...             ...           ...   \n","291      CHEMBL5190085          5690.0  intermediate   \n","292      CHEMBL5207600         37190.0      inactive   \n","293      CHEMBL5177276          1390.0  intermediate   \n","294      CHEMBL5187845        100000.0      inactive   \n","295      CHEMBL5170520        100000.0      inactive   \n","\n","                                      canonical_smiles  \n","0                                          NS(=O)(=O)O  \n","1               Cc1ccc2nc(-c3ccc(N)cc3)sc2c1S(=O)(=O)O  \n","2                  CC1=NN(c2ccc(S(=O)(=O)O)cc2)C(=O)C1  \n","3         Nc1c(O)cc(S(=O)(=O)O)c2cc([N+](=O)[O-])ccc12  \n","4       Nc1ccc(Nc2ccc([N+](=O)[O-])cc2)c(S(=O)(=O)O)c1  \n","..                                                 ...  \n","291  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...  \n","292  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...  \n","293  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...  \n","294  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...  \n","295  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...  \n","\n","[296 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-86933e5d-06d1-442b-93ae-9e6866e6f439\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>molecule_chembl_id</th>\n","      <th>standard_value</th>\n","      <th>class</th>\n","      <th>canonical_smiles</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>CHEMBL68253</td>\n","      <td>42100.0</td>\n","      <td>inactive</td>\n","      <td>NS(=O)(=O)O</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CHEMBL1339340</td>\n","      <td>13500.0</td>\n","      <td>inactive</td>\n","      <td>Cc1ccc2nc(-c3ccc(N)cc3)sc2c1S(=O)(=O)O</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>CHEMBL3088000</td>\n","      <td>6100.0</td>\n","      <td>intermediate</td>\n","      <td>CC1=NN(c2ccc(S(=O)(=O)O)cc2)C(=O)C1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>CHEMBL3087999</td>\n","      <td>41000.0</td>\n","      <td>inactive</td>\n","      <td>Nc1c(O)cc(S(=O)(=O)O)c2cc([N+](=O)[O-])ccc12</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CHEMBL3087998</td>\n","      <td>47600.0</td>\n","      <td>inactive</td>\n","      <td>Nc1ccc(Nc2ccc([N+](=O)[O-])cc2)c(S(=O)(=O)O)c1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>291</th>\n","      <td>CHEMBL5190085</td>\n","      <td>5690.0</td>\n","      <td>intermediate</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","    </tr>\n","    <tr>\n","      <th>292</th>\n","      <td>CHEMBL5207600</td>\n","      <td>37190.0</td>\n","      <td>inactive</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","    </tr>\n","    <tr>\n","      <th>293</th>\n","      <td>CHEMBL5177276</td>\n","      <td>1390.0</td>\n","      <td>intermediate</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","    </tr>\n","    <tr>\n","      <th>294</th>\n","      <td>CHEMBL5187845</td>\n","      <td>100000.0</td>\n","      <td>inactive</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","    </tr>\n","    <tr>\n","      <th>295</th>\n","      <td>CHEMBL5170520</td>\n","      <td>100000.0</td>\n","      <td>inactive</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>296 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-86933e5d-06d1-442b-93ae-9e6866e6f439')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-86933e5d-06d1-442b-93ae-9e6866e6f439 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-86933e5d-06d1-442b-93ae-9e6866e6f439');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-19eb3eaf-d7f3-4482-ba05-de383c93ec47\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-19eb3eaf-d7f3-4482-ba05-de383c93ec47')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-19eb3eaf-d7f3-4482-ba05-de383c93ec47 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["import numpy as np\n","! pip install rdkit\n","from rdkit import Chem\n","from rdkit.Chem import Descriptors, Lipinski"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-LEE-4n4uwu-","executionInfo":{"status":"ok","timestamp":1694158859357,"user_tz":-330,"elapsed":9261,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"b1dc9eca-9c8f-4f21-b7db-67ce983ed2d0"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting rdkit\n","  Downloading rdkit-2023.3.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (29.5 MB)\n","\u001b[K     |████████████████████████████████| 29.5 MB 45.9 MB/s \n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.7/site-packages (from rdkit) (1.21.5)\n","Requirement already satisfied: Pillow in /usr/local/lib/python3.7/site-packages (from rdkit) (8.3.1)\n","Installing collected packages: rdkit\n","Successfully installed rdkit-2023.3.2\n"]}]},{"cell_type":"code","source":["def lipinski(smiles, verbose=False):\n","\n","    moldata= []\n","    for elem in smiles:\n","        mol=Chem.MolFromSmiles(elem)\n","        moldata.append(mol)\n","\n","    baseData= np.arange(1,1)\n","    i=0\n","    for mol in moldata:\n","\n","        desc_MolWt = Descriptors.MolWt(mol)\n","        desc_MolLogP = Descriptors.MolLogP(mol)\n","        desc_NumHDonors = Lipinski.NumHDonors(mol)\n","        desc_NumHAcceptors = Lipinski.NumHAcceptors(mol)\n","\n","        row = np.array([desc_MolWt,\n","                        desc_MolLogP,\n","                        desc_NumHDonors,\n","                        desc_NumHAcceptors])\n","\n","        if(i==0):\n","            baseData=row\n","        else:\n","            baseData=np.vstack([baseData, row])\n","        i=i+1\n","\n","    columnNames=[\"MW\",\"LogP\",\"NumHDonors\",\"NumHAcceptors\"]\n","    descriptors = pd.DataFrame(data=baseData,columns=columnNames)\n","\n","    return descriptors"],"metadata":{"id":"FsANFP55u8P5","executionInfo":{"status":"ok","timestamp":1694158884353,"user_tz":-330,"elapsed":4,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["df_lipinski = lipinski(df_clean_smiles.canonical_smiles)\n","df_lipinski"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"IiKnceWGvQge","executionInfo":{"status":"ok","timestamp":1694158922144,"user_tz":-330,"elapsed":885,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"3558e046-40f0-4afa-c720-f7941a277bb3"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          MW     LogP  NumHDonors  NumHAcceptors\n","0     97.095 -1.25210         2.0            2.0\n","1    320.395  3.10062         2.0            5.0\n","2    254.267  1.04590         1.0            4.0\n","3    284.249  1.28250         3.0            6.0\n","4    309.303  2.16730         3.0            6.0\n","..       ...      ...         ...            ...\n","291  541.817  8.23180         2.0            3.0\n","292  543.789  6.81570         3.0            4.0\n","293  567.855  8.71970         1.0            3.0\n","294  582.870  7.48120         1.0            4.0\n","295  555.800  6.91030         2.0            4.0\n","\n","[296 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-4b5c73f5-d783-4c51-8bc5-d1c6371e4d40\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MW</th>\n","      <th>LogP</th>\n","      <th>NumHDonors</th>\n","      <th>NumHAcceptors</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>97.095</td>\n","      <td>-1.25210</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>320.395</td>\n","      <td>3.10062</td>\n","      <td>2.0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>254.267</td>\n","      <td>1.04590</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>284.249</td>\n","      <td>1.28250</td>\n","      <td>3.0</td>\n","      <td>6.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>309.303</td>\n","      <td>2.16730</td>\n","      <td>3.0</td>\n","      <td>6.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>291</th>\n","      <td>541.817</td>\n","      <td>8.23180</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>292</th>\n","      <td>543.789</td>\n","      <td>6.81570</td>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>293</th>\n","      <td>567.855</td>\n","      <td>8.71970</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>294</th>\n","      <td>582.870</td>\n","      <td>7.48120</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>295</th>\n","      <td>555.800</td>\n","      <td>6.91030</td>\n","      <td>2.0</td>\n","      <td>4.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>296 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4b5c73f5-d783-4c51-8bc5-d1c6371e4d40')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4b5c73f5-d783-4c51-8bc5-d1c6371e4d40 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4b5c73f5-d783-4c51-8bc5-d1c6371e4d40');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ee1b50b1-6df9-4a07-8903-6d26820a6de5\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ee1b50b1-6df9-4a07-8903-6d26820a6de5')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ee1b50b1-6df9-4a07-8903-6d26820a6de5 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["df_combined = pd.concat([df, df_lipinski], axis = 1)\n","df_combined"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":686},"id":"6hBWyUEzvZZY","executionInfo":{"status":"ok","timestamp":1694158985137,"user_tz":-330,"elapsed":5,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"f9840b96-386b-4fd1-f3c3-512c96961f9c"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    molecule_chembl_id                                   canonical_smiles  \\\n","0          CHEMBL68253                                        NS(=O)(=O)O   \n","1        CHEMBL1339340             Cc1ccc2nc(-c3ccc(N)cc3)sc2c1S(=O)(=O)O   \n","2        CHEMBL3088000                CC1=NN(c2ccc(S(=O)(=O)O)cc2)C(=O)C1   \n","3        CHEMBL3087999       Nc1c(O)cc(S(=O)(=O)O)c2cc([N+](=O)[O-])ccc12   \n","4        CHEMBL3087998     Nc1ccc(Nc2ccc([N+](=O)[O-])cc2)c(S(=O)(=O)O)c1   \n","..                 ...                                                ...   \n","291      CHEMBL5190085  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","292      CHEMBL5207600  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","293      CHEMBL5177276  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","294      CHEMBL5187845  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","295      CHEMBL5170520  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","\n","     standard_value         class       MW     LogP  NumHDonors  NumHAcceptors  \n","0           42100.0      inactive   97.095 -1.25210         2.0            2.0  \n","1           13500.0      inactive  320.395  3.10062         2.0            5.0  \n","2            6100.0  intermediate  254.267  1.04590         1.0            4.0  \n","3           41000.0      inactive  284.249  1.28250         3.0            6.0  \n","4           47600.0      inactive  309.303  2.16730         3.0            6.0  \n","..              ...           ...      ...      ...         ...            ...  \n","291          5690.0  intermediate  541.817  8.23180         2.0            3.0  \n","292         37190.0      inactive  543.789  6.81570         3.0            4.0  \n","293          1390.0  intermediate  567.855  8.71970         1.0            3.0  \n","294        100000.0      inactive  582.870  7.48120         1.0            4.0  \n","295        100000.0      inactive  555.800  6.91030         2.0            4.0  \n","\n","[296 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-44beaf7b-ccdc-4f5f-9da4-9669d5a25088\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>molecule_chembl_id</th>\n","      <th>canonical_smiles</th>\n","      <th>standard_value</th>\n","      <th>class</th>\n","      <th>MW</th>\n","      <th>LogP</th>\n","      <th>NumHDonors</th>\n","      <th>NumHAcceptors</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>CHEMBL68253</td>\n","      <td>NS(=O)(=O)O</td>\n","      <td>42100.0</td>\n","      <td>inactive</td>\n","      <td>97.095</td>\n","      <td>-1.25210</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CHEMBL1339340</td>\n","      <td>Cc1ccc2nc(-c3ccc(N)cc3)sc2c1S(=O)(=O)O</td>\n","      <td>13500.0</td>\n","      <td>inactive</td>\n","      <td>320.395</td>\n","      <td>3.10062</td>\n","      <td>2.0</td>\n","      <td>5.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>CHEMBL3088000</td>\n","      <td>CC1=NN(c2ccc(S(=O)(=O)O)cc2)C(=O)C1</td>\n","      <td>6100.0</td>\n","      <td>intermediate</td>\n","      <td>254.267</td>\n","      <td>1.04590</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>CHEMBL3087999</td>\n","      <td>Nc1c(O)cc(S(=O)(=O)O)c2cc([N+](=O)[O-])ccc12</td>\n","      <td>41000.0</td>\n","      <td>inactive</td>\n","      <td>284.249</td>\n","      <td>1.28250</td>\n","      <td>3.0</td>\n","      <td>6.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CHEMBL3087998</td>\n","      <td>Nc1ccc(Nc2ccc([N+](=O)[O-])cc2)c(S(=O)(=O)O)c1</td>\n","      <td>47600.0</td>\n","      <td>inactive</td>\n","      <td>309.303</td>\n","      <td>2.16730</td>\n","      <td>3.0</td>\n","      <td>6.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>291</th>\n","      <td>CHEMBL5190085</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>5690.0</td>\n","      <td>intermediate</td>\n","      <td>541.817</td>\n","      <td>8.23180</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>292</th>\n","      <td>CHEMBL5207600</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>37190.0</td>\n","      <td>inactive</td>\n","      <td>543.789</td>\n","      <td>6.81570</td>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>293</th>\n","      <td>CHEMBL5177276</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>1390.0</td>\n","      <td>intermediate</td>\n","      <td>567.855</td>\n","      <td>8.71970</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>294</th>\n","      <td>CHEMBL5187845</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>100000.0</td>\n","      <td>inactive</td>\n","      <td>582.870</td>\n","      <td>7.48120</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>295</th>\n","      <td>CHEMBL5170520</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>100000.0</td>\n","      <td>inactive</td>\n","      <td>555.800</td>\n","      <td>6.91030</td>\n","      <td>2.0</td>\n","      <td>4.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>296 rows × 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-44beaf7b-ccdc-4f5f-9da4-9669d5a25088')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-44beaf7b-ccdc-4f5f-9da4-9669d5a25088 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-44beaf7b-ccdc-4f5f-9da4-9669d5a25088');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-04cd9d65-8f14-4e9e-9fbe-7c1ac7b81520\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-04cd9d65-8f14-4e9e-9fbe-7c1ac7b81520')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-04cd9d65-8f14-4e9e-9fbe-7c1ac7b81520 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["import numpy as np\n","\n","def pIC50(input):\n","    pIC50 = []\n","\n","    for i in input['standard_value_norm']:\n","        molar = i*(10**-9) # Converts nM to M\n","        pIC50.append(-np.log10(molar))\n","\n","    input['pIC50'] = pIC50\n","    x = input.drop('standard_value_norm', 1)\n","\n","    return x"],"metadata":{"id":"_-4-M3y4vmQu","executionInfo":{"status":"ok","timestamp":1694159000537,"user_tz":-330,"elapsed":2,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["df_combined.standard_value.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TNmklXoDvsqw","executionInfo":{"status":"ok","timestamp":1694159008436,"user_tz":-330,"elapsed":3,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"84611b50-f74c-4cb1-f1f8-4857c394cf09"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["count        296.000000\n","mean       83658.264003\n","std       256875.984881\n","min            0.027000\n","25%           13.000000\n","50%          149.000000\n","75%         6840.000000\n","max      1000000.000000\n","Name: standard_value, dtype: float64"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["-np.log10( (10**-9)* 100000000 )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IeKq8_uKvu6p","executionInfo":{"status":"ok","timestamp":1694159018653,"user_tz":-330,"elapsed":2,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"bb00668e-5649-4bee-f2d3-8dc8bd5602c0"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["1.0"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["-np.log10( (10**-9)* 10000000000 )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3esaJ3CyvxVo","executionInfo":{"status":"ok","timestamp":1694159024090,"user_tz":-330,"elapsed":4,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"690d616f-c3f4-4901-fd93-f6f056155566"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-1.0"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["def norm_value(input):\n","    norm = []\n","\n","    for i in input['standard_value']:\n","        if i > 100000000:\n","          i = 100000000\n","        norm.append(i)\n","\n","    input['standard_value_norm'] = norm\n","    x = input.drop('standard_value', 1)\n","\n","    return x\n",""],"metadata":{"id":"GbTs6w6nvyr3","executionInfo":{"status":"ok","timestamp":1694159035003,"user_tz":-330,"elapsed":637,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["df_norm = norm_value(df_combined)\n","df_norm"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":721},"id":"wD_Pj3OYv1IN","executionInfo":{"status":"ok","timestamp":1694159081017,"user_tz":-330,"elapsed":9,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"503ba90e-94c6-4461-975c-5ea5b5779afa"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-18-9e9cb124154a>:10: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only.\n","  x = input.drop('standard_value', 1)\n"]},{"output_type":"execute_result","data":{"text/plain":["    molecule_chembl_id                                   canonical_smiles  \\\n","0          CHEMBL68253                                        NS(=O)(=O)O   \n","1        CHEMBL1339340             Cc1ccc2nc(-c3ccc(N)cc3)sc2c1S(=O)(=O)O   \n","2        CHEMBL3088000                CC1=NN(c2ccc(S(=O)(=O)O)cc2)C(=O)C1   \n","3        CHEMBL3087999       Nc1c(O)cc(S(=O)(=O)O)c2cc([N+](=O)[O-])ccc12   \n","4        CHEMBL3087998     Nc1ccc(Nc2ccc([N+](=O)[O-])cc2)c(S(=O)(=O)O)c1   \n","..                 ...                                                ...   \n","291      CHEMBL5190085  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","292      CHEMBL5207600  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","293      CHEMBL5177276  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","294      CHEMBL5187845  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","295      CHEMBL5170520  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","\n","            class       MW     LogP  NumHDonors  NumHAcceptors  \\\n","0        inactive   97.095 -1.25210         2.0            2.0   \n","1        inactive  320.395  3.10062         2.0            5.0   \n","2    intermediate  254.267  1.04590         1.0            4.0   \n","3        inactive  284.249  1.28250         3.0            6.0   \n","4        inactive  309.303  2.16730         3.0            6.0   \n","..            ...      ...      ...         ...            ...   \n","291  intermediate  541.817  8.23180         2.0            3.0   \n","292      inactive  543.789  6.81570         3.0            4.0   \n","293  intermediate  567.855  8.71970         1.0            3.0   \n","294      inactive  582.870  7.48120         1.0            4.0   \n","295      inactive  555.800  6.91030         2.0            4.0   \n","\n","     standard_value_norm  \n","0                42100.0  \n","1                13500.0  \n","2                 6100.0  \n","3                41000.0  \n","4                47600.0  \n","..                   ...  \n","291               5690.0  \n","292              37190.0  \n","293               1390.0  \n","294             100000.0  \n","295             100000.0  \n","\n","[296 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-4d436289-3b69-45c5-a5d4-36bfed9a7669\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>molecule_chembl_id</th>\n","      <th>canonical_smiles</th>\n","      <th>class</th>\n","      <th>MW</th>\n","      <th>LogP</th>\n","      <th>NumHDonors</th>\n","      <th>NumHAcceptors</th>\n","      <th>standard_value_norm</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>CHEMBL68253</td>\n","      <td>NS(=O)(=O)O</td>\n","      <td>inactive</td>\n","      <td>97.095</td>\n","      <td>-1.25210</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>42100.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CHEMBL1339340</td>\n","      <td>Cc1ccc2nc(-c3ccc(N)cc3)sc2c1S(=O)(=O)O</td>\n","      <td>inactive</td>\n","      <td>320.395</td>\n","      <td>3.10062</td>\n","      <td>2.0</td>\n","      <td>5.0</td>\n","      <td>13500.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>CHEMBL3088000</td>\n","      <td>CC1=NN(c2ccc(S(=O)(=O)O)cc2)C(=O)C1</td>\n","      <td>intermediate</td>\n","      <td>254.267</td>\n","      <td>1.04590</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>6100.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>CHEMBL3087999</td>\n","      <td>Nc1c(O)cc(S(=O)(=O)O)c2cc([N+](=O)[O-])ccc12</td>\n","      <td>inactive</td>\n","      <td>284.249</td>\n","      <td>1.28250</td>\n","      <td>3.0</td>\n","      <td>6.0</td>\n","      <td>41000.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CHEMBL3087998</td>\n","      <td>Nc1ccc(Nc2ccc([N+](=O)[O-])cc2)c(S(=O)(=O)O)c1</td>\n","      <td>inactive</td>\n","      <td>309.303</td>\n","      <td>2.16730</td>\n","      <td>3.0</td>\n","      <td>6.0</td>\n","      <td>47600.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>291</th>\n","      <td>CHEMBL5190085</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>intermediate</td>\n","      <td>541.817</td>\n","      <td>8.23180</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>5690.0</td>\n","    </tr>\n","    <tr>\n","      <th>292</th>\n","      <td>CHEMBL5207600</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>inactive</td>\n","      <td>543.789</td>\n","      <td>6.81570</td>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","      <td>37190.0</td>\n","    </tr>\n","    <tr>\n","      <th>293</th>\n","      <td>CHEMBL5177276</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>intermediate</td>\n","      <td>567.855</td>\n","      <td>8.71970</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>1390.0</td>\n","    </tr>\n","    <tr>\n","      <th>294</th>\n","      <td>CHEMBL5187845</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>inactive</td>\n","      <td>582.870</td>\n","      <td>7.48120</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>100000.0</td>\n","    </tr>\n","    <tr>\n","      <th>295</th>\n","      <td>CHEMBL5170520</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>inactive</td>\n","      <td>555.800</td>\n","      <td>6.91030</td>\n","      <td>2.0</td>\n","      <td>4.0</td>\n","      <td>100000.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>296 rows × 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4d436289-3b69-45c5-a5d4-36bfed9a7669')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-4d436289-3b69-45c5-a5d4-36bfed9a7669 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-4d436289-3b69-45c5-a5d4-36bfed9a7669');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3ecbe058-f166-4f85-94c2-cad3b7175368\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3ecbe058-f166-4f85-94c2-cad3b7175368')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3ecbe058-f166-4f85-94c2-cad3b7175368 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["df_norm.standard_value_norm.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Klr_VltEwAcZ","executionInfo":{"status":"ok","timestamp":1694159105244,"user_tz":-330,"elapsed":4,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"4f11fce8-276c-4eaf-8a4d-3be75456e267"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["count        296.000000\n","mean       83658.264003\n","std       256875.984881\n","min            0.027000\n","25%           13.000000\n","50%          149.000000\n","75%         6840.000000\n","max      1000000.000000\n","Name: standard_value_norm, dtype: float64"]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["df_final = pIC50(df_norm)\n","df_final"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":721},"id":"L3YPi986wGeO","executionInfo":{"status":"ok","timestamp":1694159132665,"user_tz":-330,"elapsed":6,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"8ddfeb42-89d6-4406-bf3e-9dc01d88a6e8"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-14-715877a2f74e>:11: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only.\n","  x = input.drop('standard_value_norm', 1)\n"]},{"output_type":"execute_result","data":{"text/plain":["    molecule_chembl_id                                   canonical_smiles  \\\n","0          CHEMBL68253                                        NS(=O)(=O)O   \n","1        CHEMBL1339340             Cc1ccc2nc(-c3ccc(N)cc3)sc2c1S(=O)(=O)O   \n","2        CHEMBL3088000                CC1=NN(c2ccc(S(=O)(=O)O)cc2)C(=O)C1   \n","3        CHEMBL3087999       Nc1c(O)cc(S(=O)(=O)O)c2cc([N+](=O)[O-])ccc12   \n","4        CHEMBL3087998     Nc1ccc(Nc2ccc([N+](=O)[O-])cc2)c(S(=O)(=O)O)c1   \n","..                 ...                                                ...   \n","291      CHEMBL5190085  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","292      CHEMBL5207600  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","293      CHEMBL5177276  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","294      CHEMBL5187845  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","295      CHEMBL5170520  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","\n","            class       MW     LogP  NumHDonors  NumHAcceptors     pIC50  \n","0        inactive   97.095 -1.25210         2.0            2.0  4.375718  \n","1        inactive  320.395  3.10062         2.0            5.0  4.869666  \n","2    intermediate  254.267  1.04590         1.0            4.0  5.214670  \n","3        inactive  284.249  1.28250         3.0            6.0  4.387216  \n","4        inactive  309.303  2.16730         3.0            6.0  4.322393  \n","..            ...      ...      ...         ...            ...       ...  \n","291  intermediate  541.817  8.23180         2.0            3.0  5.244888  \n","292      inactive  543.789  6.81570         3.0            4.0  4.429574  \n","293  intermediate  567.855  8.71970         1.0            3.0  5.856985  \n","294      inactive  582.870  7.48120         1.0            4.0  4.000000  \n","295      inactive  555.800  6.91030         2.0            4.0  4.000000  \n","\n","[296 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-132cc03a-0bb7-4275-8495-d442a4ad3a9c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>molecule_chembl_id</th>\n","      <th>canonical_smiles</th>\n","      <th>class</th>\n","      <th>MW</th>\n","      <th>LogP</th>\n","      <th>NumHDonors</th>\n","      <th>NumHAcceptors</th>\n","      <th>pIC50</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>CHEMBL68253</td>\n","      <td>NS(=O)(=O)O</td>\n","      <td>inactive</td>\n","      <td>97.095</td>\n","      <td>-1.25210</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>4.375718</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CHEMBL1339340</td>\n","      <td>Cc1ccc2nc(-c3ccc(N)cc3)sc2c1S(=O)(=O)O</td>\n","      <td>inactive</td>\n","      <td>320.395</td>\n","      <td>3.10062</td>\n","      <td>2.0</td>\n","      <td>5.0</td>\n","      <td>4.869666</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>CHEMBL3088000</td>\n","      <td>CC1=NN(c2ccc(S(=O)(=O)O)cc2)C(=O)C1</td>\n","      <td>intermediate</td>\n","      <td>254.267</td>\n","      <td>1.04590</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>5.214670</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>CHEMBL3087999</td>\n","      <td>Nc1c(O)cc(S(=O)(=O)O)c2cc([N+](=O)[O-])ccc12</td>\n","      <td>inactive</td>\n","      <td>284.249</td>\n","      <td>1.28250</td>\n","      <td>3.0</td>\n","      <td>6.0</td>\n","      <td>4.387216</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CHEMBL3087998</td>\n","      <td>Nc1ccc(Nc2ccc([N+](=O)[O-])cc2)c(S(=O)(=O)O)c1</td>\n","      <td>inactive</td>\n","      <td>309.303</td>\n","      <td>2.16730</td>\n","      <td>3.0</td>\n","      <td>6.0</td>\n","      <td>4.322393</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>291</th>\n","      <td>CHEMBL5190085</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>intermediate</td>\n","      <td>541.817</td>\n","      <td>8.23180</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>5.244888</td>\n","    </tr>\n","    <tr>\n","      <th>292</th>\n","      <td>CHEMBL5207600</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>inactive</td>\n","      <td>543.789</td>\n","      <td>6.81570</td>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","      <td>4.429574</td>\n","    </tr>\n","    <tr>\n","      <th>293</th>\n","      <td>CHEMBL5177276</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>intermediate</td>\n","      <td>567.855</td>\n","      <td>8.71970</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>5.856985</td>\n","    </tr>\n","    <tr>\n","      <th>294</th>\n","      <td>CHEMBL5187845</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>inactive</td>\n","      <td>582.870</td>\n","      <td>7.48120</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>4.000000</td>\n","    </tr>\n","    <tr>\n","      <th>295</th>\n","      <td>CHEMBL5170520</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>inactive</td>\n","      <td>555.800</td>\n","      <td>6.91030</td>\n","      <td>2.0</td>\n","      <td>4.0</td>\n","      <td>4.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>296 rows × 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-132cc03a-0bb7-4275-8495-d442a4ad3a9c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-132cc03a-0bb7-4275-8495-d442a4ad3a9c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-132cc03a-0bb7-4275-8495-d442a4ad3a9c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-230e23bb-faf8-48c0-adaf-11fbfeff97bb\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-230e23bb-faf8-48c0-adaf-11fbfeff97bb')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-230e23bb-faf8-48c0-adaf-11fbfeff97bb button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["df_final.pIC50.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bcc6dmr5wNNZ","executionInfo":{"status":"ok","timestamp":1694159150524,"user_tz":-330,"elapsed":3,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"e3b2cb15-596e-497c-9b57-4f0c0b66478e"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["count    296.000000\n","mean       6.598149\n","std        1.917972\n","min        3.000000\n","25%        5.165055\n","50%        6.826824\n","75%        7.886057\n","max       10.568636\n","Name: pIC50, dtype: float64"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["df_final.to_csv('CD73_bioactivity_data_class_pIC50.csv')"],"metadata":{"id":"ygiINJzswRf7","executionInfo":{"status":"ok","timestamp":1694159177588,"user_tz":-330,"elapsed":551,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["df_2class = df_final[df_final['class'] != 'intermediate']\n","df_2class"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":686},"id":"3IHfB56wwX--","executionInfo":{"status":"ok","timestamp":1694159207141,"user_tz":-330,"elapsed":6,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"78c728cb-ce1f-4c09-a50a-5d61cd878826"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    molecule_chembl_id                                   canonical_smiles  \\\n","0          CHEMBL68253                                        NS(=O)(=O)O   \n","1        CHEMBL1339340             Cc1ccc2nc(-c3ccc(N)cc3)sc2c1S(=O)(=O)O   \n","3        CHEMBL3087999       Nc1c(O)cc(S(=O)(=O)O)c2cc([N+](=O)[O-])ccc12   \n","4        CHEMBL3087998     Nc1ccc(Nc2ccc([N+](=O)[O-])cc2)c(S(=O)(=O)O)c1   \n","6        CHEMBL3087996               NC(=O)Nc1ccc2cc(S(=O)(=O)O)cc(O)c2c1   \n","..                 ...                                                ...   \n","289      CHEMBL5185215  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","290      CHEMBL5207447  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","292      CHEMBL5207600  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","294      CHEMBL5187845  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","295      CHEMBL5170520  C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...   \n","\n","        class       MW     LogP  NumHDonors  NumHAcceptors     pIC50  \n","0    inactive   97.095 -1.25210         2.0            2.0  4.375718  \n","1    inactive  320.395  3.10062         2.0            5.0  4.869666  \n","3    inactive  284.249  1.28250         3.0            6.0  4.387216  \n","4    inactive  309.303  2.16730         3.0            6.0  4.322393  \n","6    inactive  282.277  1.28270         4.0            4.0  4.515700  \n","..        ...      ...      ...         ...            ...       ...  \n","289  inactive  568.843  7.13900         2.0            4.0  4.774432  \n","290  inactive  539.801  7.98580         2.0            3.0  4.089216  \n","292  inactive  543.789  6.81570         3.0            4.0  4.429574  \n","294  inactive  582.870  7.48120         1.0            4.0  4.000000  \n","295  inactive  555.800  6.91030         2.0            4.0  4.000000  \n","\n","[261 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-7d71e182-b327-4595-ab41-d27561ea55b5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>molecule_chembl_id</th>\n","      <th>canonical_smiles</th>\n","      <th>class</th>\n","      <th>MW</th>\n","      <th>LogP</th>\n","      <th>NumHDonors</th>\n","      <th>NumHAcceptors</th>\n","      <th>pIC50</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>CHEMBL68253</td>\n","      <td>NS(=O)(=O)O</td>\n","      <td>inactive</td>\n","      <td>97.095</td>\n","      <td>-1.25210</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>4.375718</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>CHEMBL1339340</td>\n","      <td>Cc1ccc2nc(-c3ccc(N)cc3)sc2c1S(=O)(=O)O</td>\n","      <td>inactive</td>\n","      <td>320.395</td>\n","      <td>3.10062</td>\n","      <td>2.0</td>\n","      <td>5.0</td>\n","      <td>4.869666</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>CHEMBL3087999</td>\n","      <td>Nc1c(O)cc(S(=O)(=O)O)c2cc([N+](=O)[O-])ccc12</td>\n","      <td>inactive</td>\n","      <td>284.249</td>\n","      <td>1.28250</td>\n","      <td>3.0</td>\n","      <td>6.0</td>\n","      <td>4.387216</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>CHEMBL3087998</td>\n","      <td>Nc1ccc(Nc2ccc([N+](=O)[O-])cc2)c(S(=O)(=O)O)c1</td>\n","      <td>inactive</td>\n","      <td>309.303</td>\n","      <td>2.16730</td>\n","      <td>3.0</td>\n","      <td>6.0</td>\n","      <td>4.322393</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>CHEMBL3087996</td>\n","      <td>NC(=O)Nc1ccc2cc(S(=O)(=O)O)cc(O)c2c1</td>\n","      <td>inactive</td>\n","      <td>282.277</td>\n","      <td>1.28270</td>\n","      <td>4.0</td>\n","      <td>4.0</td>\n","      <td>4.515700</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>289</th>\n","      <td>CHEMBL5185215</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>inactive</td>\n","      <td>568.843</td>\n","      <td>7.13900</td>\n","      <td>2.0</td>\n","      <td>4.0</td>\n","      <td>4.774432</td>\n","    </tr>\n","    <tr>\n","      <th>290</th>\n","      <td>CHEMBL5207447</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>inactive</td>\n","      <td>539.801</td>\n","      <td>7.98580</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>4.089216</td>\n","    </tr>\n","    <tr>\n","      <th>292</th>\n","      <td>CHEMBL5207600</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>inactive</td>\n","      <td>543.789</td>\n","      <td>6.81570</td>\n","      <td>3.0</td>\n","      <td>4.0</td>\n","      <td>4.429574</td>\n","    </tr>\n","    <tr>\n","      <th>294</th>\n","      <td>CHEMBL5187845</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>inactive</td>\n","      <td>582.870</td>\n","      <td>7.48120</td>\n","      <td>1.0</td>\n","      <td>4.0</td>\n","      <td>4.000000</td>\n","    </tr>\n","    <tr>\n","      <th>295</th>\n","      <td>CHEMBL5170520</td>\n","      <td>C=C(C)[C@@H]1CC[C@]2(C(=O)O)CC[C@]3(C)[C@H](CC...</td>\n","      <td>inactive</td>\n","      <td>555.800</td>\n","      <td>6.91030</td>\n","      <td>2.0</td>\n","      <td>4.0</td>\n","      <td>4.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>261 rows × 8 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7d71e182-b327-4595-ab41-d27561ea55b5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7d71e182-b327-4595-ab41-d27561ea55b5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7d71e182-b327-4595-ab41-d27561ea55b5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-508d257c-f677-4ad2-b278-4b98f444a88e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-508d257c-f677-4ad2-b278-4b98f444a88e')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-508d257c-f677-4ad2-b278-4b98f444a88e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["df_2class.to_csv('CD73_bioactivity_data_2class_pIC50.csv')"],"metadata":{"id":"G7XYPBREwfFr","executionInfo":{"status":"ok","timestamp":1694159232758,"user_tz":-330,"elapsed":2,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["import seaborn as sns\n","sns.set(style='ticks')\n","import matplotlib.pyplot as plt"],"metadata":{"id":"W5Z5ONRqwlrJ","executionInfo":{"status":"ok","timestamp":1694159244923,"user_tz":-330,"elapsed":1533,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(5.5, 5.5))\n","\n","sns.countplot(x='class', data=df_2class, edgecolor='black')\n","\n","plt.xlabel('Bioactivity class', fontsize=14, fontweight='bold')\n","plt.ylabel('Frequency', fontsize=14, fontweight='bold')\n","\n","plt.savefig('plot_bioactivity_class.pdf')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":513},"id":"23S-fiixwoOT","executionInfo":{"status":"ok","timestamp":1694159253765,"user_tz":-330,"elapsed":980,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"9157e1f9-7d9e-4c27-9792-b1d9c353de3c"},"execution_count":27,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 550x550 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.figure(figsize=(5, 5))\n","\n","sns.scatterplot(x='MW', y='LogP', data=df_2class, hue='class', size='pIC50', edgecolor='black', alpha=0.7)\n","\n","plt.xlabel('MW', fontsize=14, fontweight='bold')\n","plt.ylabel('LogP', fontsize=14, fontweight='bold')\n","plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0)\n","plt.savefig('plot_MW_vs_LogP.pdf')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":474},"id":"RiRLQn9xwqd8","executionInfo":{"status":"ok","timestamp":1694159312981,"user_tz":-330,"elapsed":1783,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"915a4478-7d05-494c-e688-f67ef7e3e9fe"},"execution_count":29,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.figure(figsize=(5, 5))\n","\n","sns.boxplot(x = 'class', y = 'pIC50', data = df_2class)\n","\n","plt.xlabel('Bioactivity class', fontsize=14, fontweight='bold')\n","plt.ylabel('pIC50 value', fontsize=14, fontweight='bold')\n","\n","plt.savefig('plot_ic50.pdf')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":474},"id":"4anTcm5Bw1l1","executionInfo":{"status":"ok","timestamp":1694159333991,"user_tz":-330,"elapsed":1185,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"f4b3a34c-54a7-49a6-d4c4-92009cb54407"},"execution_count":30,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["def mannwhitney(descriptor, verbose=False):\n","  # https://machinelearningmastery.com/nonparametric-statistical-significance-tests-in-python/\n","  from numpy.random import seed\n","  from numpy.random import randn\n","  from scipy.stats import mannwhitneyu\n","\n","# seed the random number generator\n","  seed(1)\n","\n","# actives and inactives\n","  selection = [descriptor, 'class']\n","  df = df_2class[selection]\n","  active = df[df['class'] == 'active']\n","  active = active[descriptor]\n","\n","  selection = [descriptor, 'class']\n","  df = df_2class[selection]\n","  inactive = df[df['class'] == 'inactive']\n","  inactive = inactive[descriptor]\n","\n","# compare samples\n","  stat, p = mannwhitneyu(active, inactive)\n","  #print('Statistics=%.3f, p=%.3f' % (stat, p))\n","\n","# interpret\n","  alpha = 0.05\n","  if p > alpha:\n","    interpretation = 'Same distribution (fail to reject H0)'\n","  else:\n","    interpretation = 'Different distribution (reject H0)'\n","\n","  results = pd.DataFrame({'Descriptor':descriptor,\n","                          'Statistics':stat,\n","                          'p':p,\n","                          'alpha':alpha,\n","                          'Interpretation':interpretation}, index=[0])\n","  filename = 'mannwhitneyu_' + descriptor + '.csv'\n","  results.to_csv(filename)\n","\n","  return results\n"],"metadata":{"id":"UvDRWb5Gw-Fx","executionInfo":{"status":"ok","timestamp":1694159359669,"user_tz":-330,"elapsed":584,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["mannwhitney('pIC50')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"id":"-c_Y8Li-xEan","executionInfo":{"status":"ok","timestamp":1694159366989,"user_tz":-330,"elapsed":3,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"8eaa3b5e-36f9-4b57-ccf8-499109e1b11e"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Descriptor  Statistics             p  alpha  \\\n","0      pIC50     13124.0  1.333142e-34   0.05   \n","\n","                       Interpretation  \n","0  Different distribution (reject H0)  "],"text/html":["\n","  <div id=\"df-9d5e084c-649e-4cb1-adc7-525c726c11c8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Descriptor</th>\n","      <th>Statistics</th>\n","      <th>p</th>\n","      <th>alpha</th>\n","      <th>Interpretation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>pIC50</td>\n","      <td>13124.0</td>\n","      <td>1.333142e-34</td>\n","      <td>0.05</td>\n","      <td>Different distribution (reject H0)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9d5e084c-649e-4cb1-adc7-525c726c11c8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9d5e084c-649e-4cb1-adc7-525c726c11c8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9d5e084c-649e-4cb1-adc7-525c726c11c8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["plt.figure(figsize=(5.5, 5.5))\n","\n","sns.boxplot(x = 'class', y = 'MW', data = df_2class)\n","\n","plt.xlabel('Bioactivity class', fontsize=14, fontweight='bold')\n","plt.ylabel('MW', fontsize=14, fontweight='bold')\n","\n","plt.savefig('plot_MW.pdf')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":513},"id":"nYZ84GeqxGXL","executionInfo":{"status":"ok","timestamp":1694159376282,"user_tz":-330,"elapsed":731,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"346a109a-aa07-4ceb-e96d-1a6efbf41317"},"execution_count":33,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 550x550 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["mannwhitney('MW')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"id":"MRywyNAixIZl","executionInfo":{"status":"ok","timestamp":1694159393831,"user_tz":-330,"elapsed":5,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"30ef1be2-939c-45ac-eae7-3c79b1092336"},"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Descriptor  Statistics             p  alpha  \\\n","0         MW      9800.0  1.464811e-09   0.05   \n","\n","                       Interpretation  \n","0  Different distribution (reject H0)  "],"text/html":["\n","  <div id=\"df-e0bb00bc-0095-473a-a22e-54729ff7a7bf\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Descriptor</th>\n","      <th>Statistics</th>\n","      <th>p</th>\n","      <th>alpha</th>\n","      <th>Interpretation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>MW</td>\n","      <td>9800.0</td>\n","      <td>1.464811e-09</td>\n","      <td>0.05</td>\n","      <td>Different distribution (reject H0)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e0bb00bc-0095-473a-a22e-54729ff7a7bf')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e0bb00bc-0095-473a-a22e-54729ff7a7bf button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e0bb00bc-0095-473a-a22e-54729ff7a7bf');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":34}]},{"cell_type":"code","source":["plt.figure(figsize=(5, 5))\n","\n","sns.boxplot(x = 'class', y = 'LogP', data = df_2class)\n","\n","plt.xlabel('Bioactivity class', fontsize=14, fontweight='bold')\n","plt.ylabel('LogP', fontsize=14, fontweight='bold')\n","\n","plt.savefig('plot_LogP.pdf')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":474},"id":"NHcPTs5axM_U","executionInfo":{"status":"ok","timestamp":1694159409124,"user_tz":-330,"elapsed":1074,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"4de819d4-0b95-4da0-f99c-f4afc078559a"},"execution_count":35,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["mannwhitney('LogP')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"id":"2at3u1gTxQan","executionInfo":{"status":"ok","timestamp":1694159422029,"user_tz":-330,"elapsed":4,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"7c3ca19f-65f0-48bc-b2d3-1fd16ed0a2fd"},"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Descriptor  Statistics             p  alpha  \\\n","0       LogP      2808.0  2.347488e-12   0.05   \n","\n","                       Interpretation  \n","0  Different distribution (reject H0)  "],"text/html":["\n","  <div id=\"df-de438065-04aa-42fd-bc6d-ee2fd2543df5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Descriptor</th>\n","      <th>Statistics</th>\n","      <th>p</th>\n","      <th>alpha</th>\n","      <th>Interpretation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>LogP</td>\n","      <td>2808.0</td>\n","      <td>2.347488e-12</td>\n","      <td>0.05</td>\n","      <td>Different distribution (reject H0)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-de438065-04aa-42fd-bc6d-ee2fd2543df5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-de438065-04aa-42fd-bc6d-ee2fd2543df5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-de438065-04aa-42fd-bc6d-ee2fd2543df5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":36}]},{"cell_type":"code","source":["plt.figure(figsize=(5.5, 5.5))\n","\n","sns.boxplot(x = 'class', y = 'NumHDonors', data = df_2class)\n","\n","plt.xlabel('Bioactivity class', fontsize=14, fontweight='bold')\n","plt.ylabel('NumHDonors', fontsize=14, fontweight='bold')\n","\n","plt.savefig('plot_NumHDonors.pdf')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":513},"id":"GsUYjO2KxTzW","executionInfo":{"status":"ok","timestamp":1694159429437,"user_tz":-330,"elapsed":881,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"11cdf19f-c037-4b8e-f2c7-a380a19f04ac"},"execution_count":37,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 550x550 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["mannwhitney('NumHDonors')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"id":"79uRC8ZlxVZR","executionInfo":{"status":"ok","timestamp":1694159442854,"user_tz":-330,"elapsed":4,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"8c6b742a-401a-45ff-cddc-64d9584086b2"},"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Descriptor  Statistics             p  alpha  \\\n","0  NumHDonors     10580.0  1.449029e-14   0.05   \n","\n","                       Interpretation  \n","0  Different distribution (reject H0)  "],"text/html":["\n","  <div id=\"df-2a7ba5cf-665a-4330-a8af-aec1faec481a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Descriptor</th>\n","      <th>Statistics</th>\n","      <th>p</th>\n","      <th>alpha</th>\n","      <th>Interpretation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>NumHDonors</td>\n","      <td>10580.0</td>\n","      <td>1.449029e-14</td>\n","      <td>0.05</td>\n","      <td>Different distribution (reject H0)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2a7ba5cf-665a-4330-a8af-aec1faec481a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2a7ba5cf-665a-4330-a8af-aec1faec481a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2a7ba5cf-665a-4330-a8af-aec1faec481a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":38}]},{"cell_type":"code","source":["plt.figure(figsize=(5.5, 5.5))\n","\n","sns.boxplot(x = 'class', y = 'NumHAcceptors', data = df_2class)\n","\n","plt.xlabel('Bioactivity class', fontsize=14, fontweight='bold')\n","plt.ylabel('NumHAcceptors', fontsize=14, fontweight='bold')\n","\n","plt.savefig('plot_NumHAcceptors.pdf')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":513},"id":"0vJaSFIJxY0a","executionInfo":{"status":"ok","timestamp":1694159450780,"user_tz":-330,"elapsed":990,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"98788fa3-6469-4102-b0f4-13d1caf47cc2"},"execution_count":39,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 550x550 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["mannwhitney('NumHAcceptors')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"id":"V-3tcVNYxanJ","executionInfo":{"status":"ok","timestamp":1694159459563,"user_tz":-330,"elapsed":4,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"8026bd48-f53d-41f9-a3a4-5417e5441d2b"},"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Descriptor  Statistics             p  alpha  \\\n","0  NumHAcceptors     10391.0  4.567423e-13   0.05   \n","\n","                       Interpretation  \n","0  Different distribution (reject H0)  "],"text/html":["\n","  <div id=\"df-0b359f1c-53dc-4b1d-a8ec-6f4a319f6963\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Descriptor</th>\n","      <th>Statistics</th>\n","      <th>p</th>\n","      <th>alpha</th>\n","      <th>Interpretation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>NumHAcceptors</td>\n","      <td>10391.0</td>\n","      <td>4.567423e-13</td>\n","      <td>0.05</td>\n","      <td>Different distribution (reject H0)</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0b359f1c-53dc-4b1d-a8ec-6f4a319f6963')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0b359f1c-53dc-4b1d-a8ec-6f4a319f6963 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0b359f1c-53dc-4b1d-a8ec-6f4a319f6963');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":40}]},{"cell_type":"code","source":["! zip -r results.zip . -i *.csv *.pdf"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7K2aHkCoxdBI","executionInfo":{"status":"ok","timestamp":1694159471242,"user_tz":-330,"elapsed":6,"user":{"displayName":"Vaibhav Adicherla","userId":"00357057095858327279"}},"outputId":"b31aa518-b941-4d27-ac74-8545e14f0ee0"},"execution_count":41,"outputs":[{"output_type":"stream","name":"stdout","text":["  adding: plot_ic50.pdf (deflated 36%)\n","  adding: mannwhitneyu_MW.csv (deflated 8%)\n","  adding: plot_bioactivity_class.pdf (deflated 39%)\n","  adding: CD73_bioactivity_data_curated.csv (deflated 84%)\n","  adding: mannwhitneyu_pIC50.csv (deflated 10%)\n","  adding: plot_LogP.pdf (deflated 38%)\n","  adding: plot_NumHAcceptors.pdf (deflated 38%)\n","  adding: mannwhitneyu_NumHAcceptors.csv (deflated 10%)\n","  adding: CD73_bioactivity_data_class_pIC50.csv (deflated 78%)\n","  adding: mannwhitneyu_NumHDonors.csv (deflated 11%)\n","  adding: CD73_bioactivity_data_2class_pIC50.csv (deflated 78%)\n","  adding: plot_MW_vs_LogP.pdf (deflated 9%)\n","  adding: plot_MW.pdf (deflated 38%)\n","  adding: plot_NumHDonors.pdf (deflated 37%)\n","  adding: mannwhitneyu_LogP.csv (deflated 8%)\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"oWzIp0Sjxftr"},"execution_count":null,"outputs":[]}]}